{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../SeedGameEngine/src/manager/Manager.js","webpack:///../SeedGameEngine/src/manager/UpdateableManager.js","webpack:///../SeedGameEngine/src/base/Updateable.js","webpack:///../SeedGameEngine/src/component/Component.js","webpack:///../SeedGameEngine/src/const/KeyCode.js","webpack:///../SeedGameEngine/src/manager/DOMManager.js","webpack:///../SeedGameEngine/src/utils/Messager.js","webpack:///../SeedGameEngine/src/manager/InputManager.js","webpack:///../SeedGameEngine/src/component/Controller.js","webpack:///../SeedGameEngine/src/component/ClickController.js","webpack:///../SeedGameEngine/src/internal/Point.js","webpack:///../SeedGameEngine/src/component/Transform.js","webpack:///../SeedGameEngine/src/object/GameObject.js","webpack:///../SeedGameEngine/src/manager/SceneManager.js","webpack:///../SeedGameEngine/src/const/VertexShader.js","webpack:///../SeedGameEngine/src/const/FragmentShader.js","webpack:///../SeedGameEngine/src/manager/ProgramManager.js","webpack:///../SeedGameEngine/src/utils/MathUtil.js","webpack:///../SeedGameEngine/src/render/WebGL/Matrix.js","webpack:///../SeedGameEngine/src/render/WebGL/Matrix3.js","webpack:///../SeedGameEngine/src/manager/RenderManager.js","webpack:///../SeedGameEngine/src/internal/Color.js","webpack:///../SeedGameEngine/src/component/Renderable.js","webpack:///../SeedGameEngine/src/component/Renderable2D.js","webpack:///../SeedGameEngine/src/component/TopDownController.js","webpack:///../SeedGameEngine/src/internal/Bounds.js","webpack:///../SeedGameEngine/src/manager/AudioManager.js","webpack:///../SeedGameEngine/src/manager/PersistentManager.js","webpack:///../SeedGameEngine/src/manager/EngineManager.js","webpack:///../SeedGameEngine/src/manager/NetworkManager.js","webpack:///../SeedGameEngine/src/manager/PhysicsManager.js","webpack:///../SeedGameEngine/src/object/SceneObject.js","webpack:///../SeedGameEngine/src/render/Viewport.js","webpack:///../SeedGameEngine/src/scene/Scene.js","webpack:///../SeedGameEngine/src/Engine.js","webpack:///./src/component/RandomMovement.js","webpack:///./src/component/Movement.js","webpack:///./src/object/Player.js","webpack:///./src/scene/MainScene.js","webpack:///./src/entry.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Manager","[object Object]","manager_UpdateableManager","super","this","updateableIDCounter","updateable","id","Updateable_Updateable","hasStarted","hasPaused","deregister","registerUpdateable","onStart","update","postStartUpdate","start","onUpdate","onEnd","destructor","onPause","onUnpause","Component_Component","unique","isUnique","const_KeyCode","_0","_1","_2","CANCEL","_4","_5","HELP","_7","BACK_SPACE","TAB","_10","_11","CLEAR","ENTER","ENTER_SPECIAL","_15","SHIFT","CONTROL","ALT","PAUSE","CAPS_LOCK","KANA","EISU","JUNJA","FINAL","HANJA","_26","ESCAPE","CONVERT","NONCONVERT","ACCEPT","MODECHANGE","SPACE","PAGE_UP","PAGE_DOWN","END","HOME","LEFT","UP","RIGHT","DOWN","SELECT","PRINT","EXECUTE","PRINTSCREEN","INSERT","DELETE","_47","NUMBER_0","NUMBER_1","NUMBER_2","NUMBER_3","NUMBER_4","NUMBER_5","NUMBER_6","NUMBER_7","NUMBER_8","NUMBER_9","COLON","SEMICOLON","LESS_THAN","EQUALS","GREATER_THAN","QUESTION_MARK","AT","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","OS_KEY","_92","CONTEXT_MENU","_94","SLEEP","NUMPAD0","NUMPAD1","NUMPAD2","NUMPAD3","NUMPAD4","NUMPAD5","NUMPAD6","NUMPAD7","NUMPAD8","NUMPAD9","MULTIPLY","ADD","SEPARATOR","SUBTRACT","DECIMAL","DIVIDE","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","F13","F14","F15","F16","F17","F18","F19","F20","F21","F22","F23","F24","_136","_137","_138","_139","_140","_141","_142","_143","NUM_LOCK","SCROLL_LOCK","WIN_OEM_FJ_JISHO","WIN_OEM_FJ_MASSHOU","WIN_OEM_FJ_TOUROKU","WIN_OEM_FJ_LOYA","WIN_OEM_FJ_ROYA","_151","_152","_153","_154","_155","_156","_157","_158","_159","CIRCUMFLEX","EXCLAMATION","DOUBLE_QUOTE","HASH","DOLLAR","PERCENT","AMPERSAND","UNDERSCORE","OPEN_PAREN","CLOSE_PAREN","ASTERISK","PLUS","PIPE","HYPHEN_MINUS","OPEN_CURLY_BRACKET","CLOSE_CURLY_BRACKET","TILDE","_177","_178","_179","_180","VOLUME_MUTE","VOLUME_DOWN","VOLUME_UP","_184","_185","COMMA","MINUS","PERIOD","SLASH","BACK_QUOTE","_193","_194","_195","_196","_197","_198","_199","_200","_201","_202","_203","_204","_205","_206","_207","_208","_209","_210","_211","_212","_213","_214","_215","_216","_217","_218","OPEN_BRACKET","BACK_SLASH","CLOSE_BRACKET","QUOTE","_223","META","ALTGR","_226","WIN_ICO_HELP","WIN_ICO_00","_229","WIN_ICO_CLEAR","_231","_232","WIN_OEM_RESET","WIN_OEM_JUMP","WIN_OEM_PA1","WIN_OEM_PA2","WIN_OEM_PA3","WIN_OEM_WSCTRL","WIN_OEM_CUSEL","WIN_OEM_ATTN","WIN_OEM_FINISH","WIN_OEM_COPY","WIN_OEM_AUTO","WIN_OEM_ENLW","WIN_OEM_BACKTAB","ATTN","CRSEL","EXSEL","EREOF","PLAY","ZOOM","_252","PA1","WIN_OEM_CLEAR","_255","manager_DOMManager","canvas","GL","canvasWidth","canvasHeight","canvasDPIWidth","canvasDPIHeight","loadCanvas","adjust","document","getElementById","getContext","window","addEventListener","imageSmoothingEnabled","webkitImageSmoothingEnabled","width","height","clientWidth","clientHeight","Messager","listenerIDCounter","data","listeners","notify","length","callback","notifyNow","token","stop","push","manager_InputManager","events","EVENT","MOUSE_LEFT","MOUSE_RIGHT","KEY_DOWN","KEY_UP","KEY","KEY_PRESSED","LEFT_CLICK","RIGHT_CLICK","KeyCode","event","set","x","offsetX","y","offsetY","shiftHeld","shiftKey","ctrlHeld","ctrlKey","oncontextmenu","preventDefault","code","which","keyCode","repeat","watch","Controller_Controller","ClickController_ClickController","onLeft","onRight","onLeftClick","onRightClick","pos","gameObject","transform","getPosition","sca","getScale","divide","ev","Point_Point","z","point","divX","divY","divZ","multiX","multiY","multiZ","addX","addY","addZ","subX","subY","subZ","Math","sqrt","len","Transform_Transform","position","scale","rotation","className","_position","_rotation","_scale","_originOffset","renderable","setPosition","center","setOriginOffset","setRotation","scaleX","scaleY","scaleZ","setScale","copy","GameObject_GameObject","Point","size","components","addComponent","getComponent","component","onAddComponent","componentID","end","splice","componentName","compTypes","keys","thisCompType","ii","index","preUpdate","updateComponents","postUpdate","onPreUpdate","onPostUpdate","manager_SceneManager","scenes","sceneObject","scene","getCurrentScene","registerSceneObject","viewport","registerViewport","sceneObjects","pop","pause","unpause","DEFAULT_V","DEFAULT_F","manager_ProgramManager","programIDCounter","programs","addProgram","programKey","programName","vertexShaderSource","fragmentShaderSource","program","_createProgram","vertexShader","fragmentShader","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","console","error","getProgramInfoLog","deleteProgram","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","_createShader","VERTEX_SHADER","FRAGMENT_SHADER","_createShadersProgram","degToRad","deg","PI","Matrix","rotationDegree","Matrix3_Matrix3","rad","cos","sin","matrix","slice","m3","w","h","mat","manager_RenderManager","currentProgram","_updateProgram","getProgram","positionAttributeLocation","getAttribLocation","colorLocation","getUniformLocation","matrixLocation","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","vao","createVertexArray","bindVertexArray","enableVertexAttribArray","FLOAT","vertexAttribPointer","info","useProgram","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","viewports","vi","viewPortWidth","bounds","p2","viewPortHeight","p1","renderables","renderableKeys","ri","uniform4fv","color","uniformMatrix3fv","projection","multiply","getMatrix","drawArrays","primitiveType","primitiveCount","Color","g","b","a","Renderable_Renderable","deregisterViewports","_matrixPosition","_matrixScale","_matrixRotation","_matrixOriginOffset","renderPositions","TRIANGLES","viewportID","registerRenderableComponent","objKeys","Renderable2D_Renderable2D","TopDownController_TopDownController","isKeyPressed","Bounds_Bounds","manager_PersistentManager","persistentObjects","persistentObject","manager_EngineManager","MS_PER_FRAME","coreUpdateLoopHandle","setInterval","clearInterval","SceneObject_SceneObject","Viewport_Viewport","Scene_Scene","viewportIndex","src_Engine","RandomMovement_RandomMovement","direction","random","sceneViewportBounds","abs","translate","Movement_Movement","updatePos","isUpPressed","isLeftPressed","isDownPressed","isRightPressed","normalize","Player_Player","floor","addToViewport","centerOrigin","vpBounds","MainScene_MainScene","entry_Game","addScene"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","/**\n * Baseclass for all Managers.\n * \n * In order for a new Manager to be added to the engine, it must inherit\n * this class and define these functions to be recognized by the Engine.\n * \n * TODO: Finish Plugins in Engine Manager & implement optional function calls on updateables.\n */\n\nexport default class Manager {\n    constructor() {\n\n    }\n    \n    start() {}\n    update() {}\n    end() {}\n    pause() {}\n    unpause() {}\n}","import Manager from './Manager';\n\n/**\n * Singleton manager that manages all Updateable Objects. All updateable objects are given a global game\n * ID (number) which can be used to distinguish it.\n * \n * Any object that descends from Updateable will have an ID.\n */\nexport class _UpdateableManager extends Manager {\n    /**\n     * Constructor for UpdateableManager. Holds the static ID counter.\n     */\n    constructor() {\n        super();\n        this.updateableIDCounter = 0;\n    }\n\n    /**\n     * Gives an ID and a way to unsubscribe from the Updateable binding with the manager.\n     * \n     * Since the UpdateableManager does nothing to bind the Updateable to the manager, there is no code in the callback\n     * assigned. However, the pattern is there to outline a default.\n     * \n     * @param {Updateable} updateable The updateable to be registered.\n     */\n    registerUpdateable(updateable) {\n        updateable.id = this.updateableIDCounter++;\n        let deregisterCallback = () => {}\n        return deregisterCallback;\n    }\n}\n\n/**\n * Singleton reference to the Object Manager.\n */\nconst UpdateableManager = new _UpdateableManager();\nexport default UpdateableManager;","import UpdateableManager from '../manager/UpdateableManager';\n\n/**\n * Baseclass for objects that follow the same ECS pattern of the seed engine.\n * \n * Used in anything that should follow a create, update, end loop \n * handled by the Engine.\n * \n * Many things will need to update/start/end. If you derive something that\n * has the start()/update()/end()... functions, the children should fill in\n * their respective callbacks (onStart()/onUpdate()/onEnd()/...).\n */\nexport default class Updateable {\n    constructor() {\n        this.hasStarted = false;\n        this.hasPaused = false;\n        this.id = -1;\n        this.deregister = UpdateableManager.registerUpdateable(this);\n    }\n\n    /**\n     * Base call function for when this Updateable is to be started.\n     */\n    start() {\n        this.onStart();\n        this.hasStarted = true;\n        this.update = this.postStartUpdate;\n    }\n\n    /**\n     * Base call function for when this Updateable is to be updated.\n     * \n     * Is overwritten on successful start to a simpler update loop.\n     */\n    update() {\n        if (this.hasPaused)\n            return;\n            \n        this.start();\n    }\n\n    postStartUpdate() {\n        if (this.hasPaused)\n            return;\n\n        this.onUpdate();\n    }\n\n    /**\n     * Base call function for when this Updateable is to be ended.\n     */\n    end() {\n        this.onEnd();\n        this.destructor();\n    }\n\n    /**\n     * Base call function for when this Updateable is to be paused.\n     */\n    pause() {\n        if (!this.hasPaused) {\n            this.onPause();\n            this.hasPaused = true;\n        }\n    }\n\n    /**\n     * Base call function for when this Updateable is to be unpaused.\n     */\n    unpause() {\n        if (this.hasPaused) {\n            this.onUnpause();\n            this.hasPaused = false;\n        }\n    }\n\n    /**\n     * Cleanup code for when destroying an Updateable.\n     */\n    destructor() {\n        this.deregister();\n    }\n\n    /**\n     * Called when the the object is first introduced.\n     * \n     * Managing code will call this on first iteration once introduced to the game loop.\n     */\n    onStart() {}\n\n    /**\n     * Called on every update within the game, once the object has had onStart called.\n     */\n    onUpdate() {}\n\n    /**\n     * Called when the object is being removed or cleaned up from usage.\n     */\n    onEnd() {}\n\n    /**\n     * Called when the object is intended to be paused.\n     */\n    onPause() {}\n\n    /**\n     * Called when the object is to be unpaused from paused state.\n     */\n    onUnpause() {}\n}","import Updateable from '../base/Updateable';\n\n/**\n * A component may be added to any GameObject by using\n * GameObject's function: addComponent(component).\n * \n * A component should redefine the Updateable functions inherited with custom code to define the Component functionality.\n */\nexport default class Component extends Updateable {\n    /**\n     * Constructor for Base Components.\n     * Requires a boolean to indicate if a GameObject can contain multiple\n     * components of this type.\n     * \n     * @param {boolean} unique Is there only one of these component allowed on a GameObject?\n     */\n    constructor(unique) {\n        super();\n        this.isUnique = unique;\n    }\n\n    /**\n     * Called when the component is successfully added to a GameObject.\n     */\n    onAddComponent() {}\n}","const KeyCode = {\n    _0: 0,\n    _1: 1,\n    _2: 2,\n    CANCEL: 3,\n    _4: 4,\n    _5: 5,\n    HELP: 6,\n    _7: 7,\n    BACK_SPACE: 8,\n    TAB: 9,\n    _10: 10,\n    _11: 11,\n    CLEAR: 12,\n    ENTER: 13,\n    ENTER_SPECIAL: 14,\n    _15: 15,\n    SHIFT: 16,\n    CONTROL: 17,\n    ALT: 18,\n    PAUSE: 19,\n    CAPS_LOCK: 20,\n    KANA: 21,\n    EISU: 22,\n    JUNJA: 23,\n    FINAL: 24,\n    HANJA: 25,\n    _26: 26,\n    ESCAPE: 27,\n    CONVERT: 28,\n    NONCONVERT: 29,\n    ACCEPT: 30,\n    MODECHANGE: 31,\n    SPACE: 32,\n    PAGE_UP: 33,\n    PAGE_DOWN: 34,\n    END: 35,\n    HOME: 36,\n    LEFT: 37,\n    UP: 38,\n    RIGHT: 39,\n    DOWN: 40,\n    SELECT: 41,\n    PRINT: 42,\n    EXECUTE: 43,\n    PRINTSCREEN: 44,\n    INSERT: 45,\n    DELETE: 46,\n    _47: 47,\n    NUMBER_0: 48,\n    NUMBER_1: 49,\n    NUMBER_2: 50,\n    NUMBER_3: 51,\n    NUMBER_4: 52,\n    NUMBER_5: 53,\n    NUMBER_6: 54,\n    NUMBER_7: 55,\n    NUMBER_8: 56,\n    NUMBER_9: 57,\n    COLON: 58,\n    SEMICOLON: 59,\n    LESS_THAN: 60,\n    EQUALS: 61,\n    GREATER_THAN: 62,\n    QUESTION_MARK: 63,\n    AT: 64,\n    A: 65,\n    B: 66,\n    C: 67,\n    D: 68,\n    E: 69,\n    F: 70,\n    G: 71,\n    H: 72,\n    I: 73,\n    J: 74,\n    K: 75,\n    L: 76,\n    M: 77,\n    N: 78,\n    O: 79,\n    P: 80,\n    Q: 81,\n    R: 82,\n    S: 83,\n    T: 84,\n    U: 85,\n    V: 86,\n    W: 87,\n    X: 88,\n    Y: 89,\n    Z: 90,\n    OS_KEY: 91,\n    _92: 92,\n    CONTEXT_MENU: 93,\n    _94: 94,\n    SLEEP: 95,\n    NUMPAD0: 96,\n    NUMPAD1: 97,\n    NUMPAD2: 98,\n    NUMPAD3: 99,\n    NUMPAD4: 100,\n    NUMPAD5: 101,\n    NUMPAD6: 102,\n    NUMPAD7: 103,\n    NUMPAD8: 104,\n    NUMPAD9: 105,\n    MULTIPLY: 106,\n    ADD: 107,\n    SEPARATOR: 108,\n    SUBTRACT: 109,\n    DECIMAL: 110,\n    DIVIDE: 111,\n    F1: 112,\n    F2: 113,\n    F3: 114,\n    F4: 115,\n    F5: 116,\n    F6: 117,\n    F7: 118,\n    F8: 119,\n    F9: 120,\n    F10: 121,\n    F11: 122,\n    F12: 123,\n    F13: 124,\n    F14: 125,\n    F15: 126,\n    F16: 127,\n    F17: 128,\n    F18: 129,\n    F19: 130,\n    F20: 131,\n    F21: 132,\n    F22: 133,\n    F23: 134,\n    F24: 135,\n    _136: 136,\n    _137: 137,\n    _138: 138,\n    _139: 139,\n    _140: 140,\n    _141: 141,\n    _142: 142,\n    _143: 143,\n    NUM_LOCK: 144,\n    SCROLL_LOCK: 145,\n    WIN_OEM_FJ_JISHO: 146,\n    WIN_OEM_FJ_MASSHOU: 147,\n    WIN_OEM_FJ_TOUROKU: 148,\n    WIN_OEM_FJ_LOYA: 149,\n    WIN_OEM_FJ_ROYA: 150,\n    _151: 151,\n    _152: 152,\n    _153: 153,\n    _154: 154,\n    _155: 155,\n    _156: 156,\n    _157: 157,\n    _158: 158,\n    _159: 159,\n    CIRCUMFLEX: 160,\n    EXCLAMATION: 161,\n    DOUBLE_QUOTE: 162,\n    HASH: 163,\n    DOLLAR: 164,\n    PERCENT: 165,\n    AMPERSAND: 166,\n    UNDERSCORE: 167,\n    OPEN_PAREN: 168,\n    CLOSE_PAREN: 169,\n    ASTERISK: 170,\n    PLUS: 171,\n    PIPE: 172,\n    HYPHEN_MINUS: 173,\n    OPEN_CURLY_BRACKET: 174,\n    CLOSE_CURLY_BRACKET: 175,\n    TILDE: 176,\n    _177: 177,\n    _178: 178,\n    _179: 179,\n    _180: 180,\n    VOLUME_MUTE: 181,\n    VOLUME_DOWN: 182,\n    VOLUME_UP: 183,\n    _184: 184,\n    _185: 185,\n    SEMICOLON: 186,\n    EQUALS: 187,\n    COMMA: 188,\n    MINUS: 189,\n    PERIOD: 190,\n    SLASH: 191,\n    BACK_QUOTE: 192,\n    _193: 193,\n    _194: 194,\n    _195: 195,\n    _196: 196,\n    _197: 197,\n    _198: 198,\n    _199: 199,\n    _200: 200,\n    _201: 201,\n    _202: 202,\n    _203: 203,\n    _204: 204,\n    _205: 205,\n    _206: 206,\n    _207: 207,\n    _208: 208,\n    _209: 209,\n    _210: 210,\n    _211: 211,\n    _212: 212,\n    _213: 213,\n    _214: 214,\n    _215: 215,\n    _216: 216,\n    _217: 217,\n    _218: 218,\n    OPEN_BRACKET: 219,\n    BACK_SLASH: 220,\n    CLOSE_BRACKET: 221,\n    QUOTE: 222,\n    _223: 223,\n    META: 224,\n    ALTGR: 225,\n    _226: 226,\n    WIN_ICO_HELP: 227,\n    WIN_ICO_00: 228,\n    _229: 229,\n    WIN_ICO_CLEAR: 230,\n    _231: 231,\n    _232: 232,\n    WIN_OEM_RESET: 233,\n    WIN_OEM_JUMP: 234,\n    WIN_OEM_PA1: 235,\n    WIN_OEM_PA2: 236,\n    WIN_OEM_PA3: 237,\n    WIN_OEM_WSCTRL: 238,\n    WIN_OEM_CUSEL: 239,\n    WIN_OEM_ATTN: 240,\n    WIN_OEM_FINISH: 241,\n    WIN_OEM_COPY: 242,\n    WIN_OEM_AUTO: 243,\n    WIN_OEM_ENLW: 244,\n    WIN_OEM_BACKTAB: 245,\n    ATTN: 246,\n    CRSEL: 247,\n    EXSEL: 248,\n    EREOF: 249,\n    PLAY: 250,\n    ZOOM: 251,\n    _252: 252,\n    PA1: 253,\n    WIN_OEM_CLEAR: 254,\n    _255: 255,\n};\n\nexport default KeyCode;","import Manager from './Manager';\n\n/**\n * Manages the connection between the DOM and the Game & Engine.\n * \n * The DOMManager sets up and holds reference to the DOM elements required to display the game.\n */\nexport class _DOMManager extends Manager {\n    /**\n     * Initializes defaults for the DOMManager to hold once started.\n     */\n    constructor() {\n        super();\n        this.canvas = null;\n        this.GL = null;\n\n        this.canvasWidth = 0;\n        this.canvasHeight = 0;\n        this.canvasDPIWidth = 0;\n        this.canvasDPIHeight = 0;\n    }\n\n    /**\n     * Loads the canvas & setup for WebGL.\n     */\n    start() {\n        this.loadCanvas();\n        this.adjust();\n    }\n    \n    /**\n     * Loads the canvas & sets up a WebGL2 context to be used by the engine by the id 'game'. If nothing is happening on screen,\n     * ensure that the canvas you are using has this id in its HTML tag.\n     */\n    loadCanvas() {\n        this.canvas = document.getElementById('game');\n        if (this.canvas == null)\n            throw \"Error finding DOM Canvas. The canvas requires an id='game'\";\n        this.GL = this.canvas.getContext('webgl2');\n        window.addEventListener('resize', () => {\n            this.adjust();\n        })\n    }\n\n    /*\n    Any function that plays with sizing, ratio, or other \n    DOM elements with the canvas should call this after.\n    */\n    adjust() {\n        this.GL.imageSmoothingEnabled = false;\n        this.GL.webkitImageSmoothingEnabled = false;\n\n        this.canvasWidth = this.canvas.width;\n        this.canvasHeight = this.canvas.height;\n        this.canvasDPIWidth = this.canvasWidth / this.canvas.clientWidth;\n        this.canvasDPIHeight = this.canvasHeight / this.canvas.clientHeight;\n    }\n}\n\n/**\n * Singleton reference to the DOM Manager.\n */\nconst DOMManager = new _DOMManager();\nexport default DOMManager;","/**\n * \n */\nexport default class Messager {\n    constructor() {\n        this.listenerIDCounter = 0;\n        this.data = {};\n        this.listeners = {};\n    }\n\n    set(key, data) {\n        this.data[key] = data;\n        if (this.listeners[key] == null) {\n            this.listeners[key] = [];\n        } else {\n            this.notify(key);\n        }\n    }\n\n    /*\n    triggers the events but doesnt set data.\n    */\n    notify(key) {\n        for (let i = 0; i < this.listeners[key].length; i++) {\n            this.listeners[key][i].callback(this.data[key]);\n        }\n    }\n\n    get(key) {\n        return this.data[key];\n    }\n\n    watch(key, callback, notifyNow = true) {\n        let token = {\n            id: this.listenerIDCounter++,\n            callback,\n            stop: () => {\n                for (let i = 0; i < this.listeners[key].length; i++) {\n                    if (this.listeners[key][i].id === token.id) {\n                        delete this.listeners[key][token.id];\n                    }\n                }\n            }\n        }\n        if (this.listeners[key] == null) {\n            this.listeners[key] = [];\n            notifyNow = false;\n        }\n        this.listeners[key].push(token);\n        if (notifyNow)\n            callback(this.data[key]);\n        return token;\n    }\n}","import Manager from './Manager';\nimport DOMManager from './DOMManager';\nimport Messager from '../utils/Messager';\nimport KeyCode from '../const/KeyCode';\n\nexport class _InputManager extends Manager {\n    constructor() {\n        super();     \n        this.events = new Messager();\n        this.EVENT = {\n            MOUSE_LEFT: 'mouseLeftClicked',\n            MOUSE_RIGHT: 'mouseRightClicked',\n            KEY_DOWN: 'keyDown',\n            KEY_UP: 'keyUp',\n            KEY: 'keyDownRepeat',\n        };\n        this.KEY_DOWN = [];\n        this.KEY_PRESSED = [];\n        this.KEY_UP = [];\n        this.LEFT_CLICK = [];\n        this.RIGHT_CLICK = [];\n\n        const AllKeys = 256;\n        for (let i = 0; i < AllKeys; i++) {\n            this.KEY_DOWN[i] = false;\n            this.KEY_PRESSED[i] = false;\n            this.KEY_UP[i] = false;\n        }\n    }\n\n    isKeyDown(KeyCode) {\n        return this.KEY_DOWN[KeyCode];\n    }\n\n    isKeyPressed(KeyCode) {\n        return this.KEY_PRESSED[KeyCode];\n    }\n\n    isKeyUp(KeyCode) {\n        return this.KEY_UP[KeyCode];\n    }\n\n    start() {\n        //left click manager\n        DOMManager.canvas.addEventListener('click', (event) => {\n            this.events.set(this.EVENT.MOUSE_LEFT, {\n                x: event.offsetX * DOMManager.canvasDPIWidth,\n                y: event.offsetY * DOMManager.canvasDPIHeight,\n                shiftHeld: event.shiftKey,\n                ctrlHeld: event.ctrlKey,\n            });\n        });\n\n        //right click manager\n        DOMManager.canvas.oncontextmenu = (event) => {\n            event.preventDefault();\n            this.events.set(this.EVENT.MOUSE_RIGHT, {\n                x: event.offsetX * DOMManager.canvasDPIWidth,\n                y: event.offsetY * DOMManager.canvasDPIHeight,\n                shiftHeld: event.shiftKey,\n                ctrlHeld: event.ctrlKey,\n            });\n        };\n\n        //Key down manager\n        DOMManager.canvas.addEventListener('keydown', (event) => {\n            let code = event.which || event.keyCode;\n            this.KEY_DOWN[code] = true;\n            this.KEY_PRESSED[code] = true;\n            if (!event.repeat) {\n                this.events.set(this.EVENT.KEY_DOWN, {\n                    key: event.key,\n                    code,\n                    shiftHeld: event.shiftKey,\n                    ctrlHeld: event.ctrlKey,\n                    repeat: event.repeat,\n                });\n            }\n            this.events.set(this.EVENT.KEY, {\n                key: event.key,\n                code,\n                shiftHeld: event.shiftKey,\n                ctrlHeld: event.ctrlKey,\n                repeat: event.repeat,\n            });\n        });\n\n        //Key up manager\n        DOMManager.canvas.addEventListener('keyup', (event) => {\n            let code = event.which || event.keyCode;\n            this.KEY_DOWN[code] = false;\n            this.KEY_PRESSED[code] = false;\n            this.KEY_UP[code] = true;\n            this.events.set(this.EVENT.KEY_UP, {\n                key: event.key,\n                code,\n                shiftHeld: event.shiftKey,\n                ctrlHeld: event.ctrlKey,\n                repeat: event.repeat,\n            });\n        });\n\n        this.events.watch(this.EVENT.MOUSE_LEFT, (event) => {\n            this.LEFT_CLICK.push(event);\n        });\n\n        this.events.watch(this.EVENT.MOUSE_RIGHT, (event) => {\n            this.RIGHT_CLICK.push(event);\n        });\n    }\n\n    update() {\n        this.KEY_DOWN = [];\n        this.KEY_UP = [];\n        this.LEFT_CLICK = [];\n        this.RIGHT_CLICK = [];\n    }\n}\n\n/**\n * Singleton reference to the Input Manager.\n */\nconst InputManager = new _InputManager(); \nexport default InputManager;","import Component from './Component';\nimport KeyCode from '../const/KeyCode';\nimport InputManager from '../manager/InputManager';\n\n/**\n * A Baseclass for controller components. It is advised to use\n * controllers to contain movement logic. There are basic movement and \n * onClick controllers. You may make your own, remember to derive this class.\n */\nexport default class Controller extends Component {\n    constructor() {\n        super(false);\n    }\n}","import Controller from './Controller';\nimport KeyCode from '../const/KeyCode';\nimport InputManager from '../manager/InputManager';\n\n/**\n * \n */\nexport default class ClickController extends Controller {\n    constructor(onLeft = (event) => {}, onRight = (event) => {}) {\n        super(true);\n        this.onLeftClick = onLeft;\n        this.onRightClick = onRight;\n    }\n\n    onUpdate() {\n        let pos = this.gameObject.transform.getPosition();\n        let sca = this.gameObject.transform.getScale().divide(2);\n        for (let i = 0; i < InputManager.LEFT_CLICK.length; i++) {\n            let ev = InputManager.LEFT_CLICK[i];\n            if (pos.x - sca.x <= ev.x && pos.x + sca.x >= ev.x && pos.y - sca.y <= ev.y && pos.y + sca.y >= ev.y) {\n                this.onLeftClick(ev);\n            }\n        }\n        for (let i = 0; i < InputManager.RIGHT_CLICK.length; i++) {\n            let ev = InputManager.RIGHT_CLICK[i];\n            if (pos.x - sca.x <= ev.x && pos.x + sca.x >= ev.x && pos.y - sca.y <= ev.y && pos.y + sca.y >= ev.y) {\n                this.onRightClick(ev);\n            }\n        }\n    }\n}","/**\n * A point with x, y, z values. It may also be referred to as a Vector.\n */\nexport default class Point {\n    /**\n     * An x, y, z point. Default parameters are set as 0.\n     * \n     * @param {number} x X position of the point.\n     * @param {number} y Y position of the point.\n     * @param {number} z Z position of the point.\n     */\n    constructor(x = 0, y = 0, z = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    \n    /**\n     * Sets the point to a new x, y, z. Previous values are set\n     * as default parameters.\n     * \n     * @param {number} x X position of the point.\n     * @param {number} y Y position of the point.\n     * @param {number} z Z position of the point.\n     */\n    set(x = this.x, y = this.y, z = this.z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    static copy(point) {\n        return new Point(point.x, point.y, point.z);\n    }\n\n    divide(divX, divY = divX, divZ = divX) {\n        this.x /= divX;\n        this.y /= divY;\n        this.z /= divZ;\n        return this;\n    }\n\n    multiply(multiX, multiY = multiX, multiZ = multiX) {\n        this.x *= multiX;\n        this.y *= multiY;\n        this.z *= multiZ;\n        return this;\n    }\n\n    add(addX, addY = addX, addZ = addX) {\n        this.x += addX;\n        this.y += addY;\n        this.z += addZ;\n        return this;\n    }\n\n    subtract(subX, subY = subX, subZ = subX) {\n        this.x -= subX;\n        this.y += subY;\n        this.z += subZ;\n        return this;\n    }\n\n    length() {\n        return Math.sqrt((this.x * this.x) + (this.y * this.y) + (this.z * this.z));\n    }\n\n    normalize() {\n        let len = this.length();\n        if (len !== 0)\n            this.divide(len);\n    }\n}","import Component from './Component';\nimport Point from '../internal/Point';\n\n/**\n * A component all GameObjects are given by default on instantiation.\n * \n * Transform components are unique to the object, meaning there cannot be more than\n * one Transform on a GameObject.\n * \n * Transforms keep track of GameObject position, scale (size), rotation, and \n * origin offset. These should be changes with their respective setters, and not directly,\n * to ensure the correct components are notified of these changes.\n * \n * TODO: Make rotation work on 3 axis like position and scale.\n * TODO: Change the updates and setters of the position/scale/rotation to use funcions in their base\n * definitions and remove the wrappers here to reduce code.\n */\nexport default class Transform extends Component {\n    constructor(position = new Point(0, 0, 0), scale = new Point(1, 1, 1), rotation = 0) {\n        super(true);\n        this.className='Transform';\n        this._position = position;\n        this._rotation = rotation;\n        this._scale = scale;\n        this._originOffset = new Point(0, 0, 0);\n        this.renderable = null;\n    }\n\n    /**\n     * Sets the Transforms position.\n     * \n     * @param {number} x X position. Defaults to current X position.\n     * @param {number} y Y position. Defaults to current Y position.\n     * @param {number} z Z position. Defaults to current Z position.\n     */\n    setPosition(x = this._position.x, y = this._position.y, z = this._position.z) {\n        this._position.set(x, y, z);\n        if (this.renderable != null) {\n            this.renderable.setPosition(this._position);\n        }\n    }\n\n    /**\n     * Triggers between two types of regularly used origin points. \n     * \n     * Origin points are used with Renderables and other components to offset the origin different from the Transform's position.\n     * \n     * \"Center\": (-0.5, -0.5, -0.5) centered to the Tranform's position, and \"Default\": (0, 0, 0), beginning at the top left of the Transform.\n     * \n     * @param {boolean} center \"Center\" if true, \"Default\" if false.\n     */\n    centerOrigin(center = true) {\n        if (center) {\n            this.setOriginOffset(-0.5, -0.5, -0.5);\n        } else {\n            this.setOriginOffset(0, 0, 0);\n        }\n    }\n\n    /**\n     * Sets the origin offset position. \n     * \n     * If you want an object to exist at a \n     * position, but do something else (like drawing, animations) \n     * in a relative position the the Tranform, use this to change the \n     * offset from the Transfrom.\n     * \n     * (0, 0, 0) would be top left of the transform. \n     * (-0.5, -0.5, -0.5) would be center of the transform. \n     * (-1, -1, -1) would be bottom right of transform.\n     * \n     * Parameters default to their current values.\n     * \n     * @param {number} x X axis offset. Defaults to current origin offset X.\n     * @param {number} y Y axis offset. Defaults to current origin offset Y.\n     * @param {number} z Z axis offset. Defaults to current origin offset Z.\n     */\n    setOriginOffset(x = this._originOffset.x, y = this._originOffset.y, z = this._originOffset.z) {\n        this._originOffset.set(x, y, z);\n        if (this.renderable != null) {\n            this.renderable.setOriginOffset(this._originOffset);\n        }\n    }\n\n    /**\n     * Rotates the transform to face a different direction.\n     * \n     * TODO: implement more than z axis rotation.\n     * \n     * @param {number} rotation Rotation around the Z axis (in degrees).\n     */\n    setRotation(rotation) {\n        this._rotation = rotation;\n        if (this.renderable != null) {\n            this.renderable.setRotation(this._rotation);\n        }\n    }\n\n    /**\n     * \n     * @param {number} scaleX X scale from 1. Defaults to current scale X.\n     * @param {number} scaleY Y scale from 1. Defaults to current scale Y.\n     * @param {number} scaleZ Z scale from 1. Defaults to current scale Z.\n     */\n    setScale(scaleX = this.scaleX, scaleY = this.scaleY, scaleZ = this.scaleZ) {\n        this._scale.set(scaleX, scaleY, scaleZ);\n        if (this.renderable != null) {\n            this.renderable.setScale(this._scale);\n        }\n    }\n\n    /**\n     * Adds the parameters of this function to the Transforms position.\n     * \n     * @param {number} x X position. Defaults to 0.\n     * @param {number} y Y position. Defaults to 0.\n     * @param {number} z Z position. Defaults to 0.\n     */\n    translate(x = 0, y = 0, z = 0) {\n        this._position.x += x;\n        this._position.y += y;\n        this._position.z += z;\n        if (this.renderable != null) {\n            this.renderable.setPosition(this._position);\n        }\n    }\n\n    /**\n     * Adds the rotation parameter to the current Transform rotation.\n     * \n     * @param {number} rotation Rotation to add.\n     */\n    rotate(rotation) {\n        this._rotation += rotation;\n        if (this.renderable != null) {\n            this.renderable.setRotation(this._rotation);\n        }\n    }\n\n    /**\n     * Adds the parameters of this function to the Transforms scale.\n     * \n     * @param {number} scaleX X scale. Defaults to 0.\n     * @param {number} scaleY Y scale. Defaults to 0.\n     * @param {number} scaleZ Z scale. Defaults to 0.\n     */\n    scale(scaleX = 0, scaleY = 0, scaleZ = 0) {\n        this._scale.x += scaleX;\n        this._scale.y += scaleY;\n        this._scale.z += scaleZ;\n        if (this.renderable != null) {\n            this.renderable.setScale(this._scale);\n        }\n    }\n\n    /**\n     * @returns {Point} The transform's position.\n     */\n    getPosition() {\n        return Point.copy(this._position);\n    }\n\n    /**\n     * @returns {Point} The transform's scale.\n     */\n    getScale() {\n        return Point.copy(this._scale);\n    }\n\n    /**\n     * @returns {number} The transform's rotation.\n     */\n    getRotation() {\n        return Point.copy(this._rotation);\n    }\n\n    /**\n     * @returns {Point} The transform's origin offset.\n     */\n    getOriginOffset() {\n        return Point.copy(this._originOffset);\n    }\n}","import Updateable from '../base/Updateable';\nimport Component from '../component/Component';\nimport Transform from '../component/Transform';\n\n/**\n * Baseclass GameObject which derives from Updateable.\n * \n * Do not derive this class directly! GameObjects are not managed until they are assigned to a manager.\n * Instead, derive SceneObject or PersistentObject to create objects that exist the scope of a scene, or the scope of the game.\n * \n * All objects that should exist in the game screen should derive this. \n */\nexport default class GameObject extends Updateable {\n    /**\n     * Default position, size and rotation of the Object.\n     * \n     * @param {Point} position A point of creation in the world.\n     * @param {Point} size A point representing scale of the object.\n     * @param {number} rotation A number representing angular rotation (in degrees).\n     */\n    constructor(position = new Point(0, 0, 0), size = new Point(32, 32, 1), rotation = 0) {\n        super();\n        this.className = 'GameObject';\n\n        this.components = {};\n        this.addComponent(new Transform(position, size, rotation));\n        this.transform = this.getComponent(\"Transform\");\n    }\n\n    /**\n     * Adds a component to this game object, and keeps reference to it.\n     * GameObjects will handle their components as they are added to the object.\n     * \n     * @param {Component} component The component assigned to this object.\n     */\n    addComponent(component) {\n        if (this.components[component.className] == null) {\n            this.components[component.className] = [];\n        }\n        if (component.isUnique && this.components[component.className].length > 0) {\n            throw 'There is already a unique component of type ' + component.className + ' on this GameObject!';\n            return false;\n        }\n        this.components[component.className].push(component);\n        component.gameObject = this;\n        component.onAddComponent();\n        return true;\n    }\n\n    /**\n     * Removes a single component from this GameObject by ID.\n     * \n     * @param {number} componentID Id of the component to remove.\n     */\n    removeComponent(componentID) {\n        if (this.components[component.className] == null)\n            return false;\n        for (let i = 0; i < this.components[component.className].length; i++) {\n            if (this.components[component.className][i].id === componentID) {\n                this.components[component.className][i].end();\n                this.components[component.className].splice(i, 1);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Removes all Components of the named type.\n     * \n     * @param {string} componentName The name of the components to clear.\n     */\n    removeComponents(componentName) {\n        if (this.components[componentName] == null)\n            return false;\n        for (let i = 0; i < this.components[componentName].length; i++) {\n            this.components[componentName][i].end();\n            this.components[componentName].splice(i, 1);\n        }\n        return true;\n    }\n\n    /**\n     * Removes all components except for the Transform component.\n     */\n    removeAllComponents() {\n        let compTypes = Object.keys(this.components);\n        for (let i = 0; i < compTypes.length; i++) {\n            let thisCompType = compTypes[i];\n            if (thisCompType === 'Transform')\n                continue;\n            for (let ii = 0; ii < this.components[thisCompType].length; ii++) {\n                this.components[thisCompType][ii].end();\n                this.components[thisCompType].splice(ii, 1);\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Returns a boolean on if there is a component of type {componentName}.\n     * \n     * @param {string} componentName Name of the component type to search for.\n     * \n     * @returns {boolean} true if there is at least one component of this type.\n     */\n    hasComponent(componentName) {\n        if (this.components[componentName] == null) {\n            return false;\n        }\n        return this.components[componentName].length > 0;\n    }\n\n    /**\n     * Returns a component of type {componentName}. The second parameter can determine which \n     * Component of that type to return if there are more than 1. \n     * \n     * @param {string} componentName Name of the component type to return.\n     * @param {*} index Index of the component to get. Defaults to first component.\n     */\n    getComponent(componentName, index = 0) {\n        if (this.components[componentName] == null) {\n            return null;\n        }\n        return this.components[componentName][index];\n    }\n\n    /**\n     * Updates all components on this GameObject.\n     */\n    updateComponents() {\n        let compTypes = Object.keys(this.components);\n        for (let i = 0; i < compTypes.length; i++) {\n            let thisCompType = compTypes[i];\n            for (let ii = 0; ii < this.components[thisCompType].length; ii++) {\n                this.components[thisCompType][ii].update();\n            }\n        }\n    }\n    \n    /**\n     * Rewritten postStartUpdate() functions which is originally defined in Updateable.\n     * The GameObject adds a pre and post update function, and respective overrideable callbacks\n     * (onPreUpdate and onPostUpdate).\n     */\n    postStartUpdate() {\n        if (this.hasPaused)\n            return;\n        \n        this.preUpdate();\n        this.onUpdate();\n        this.updateComponents();\n        this.postUpdate();\n    }\n\n    /**\n     * Called by the GameObject before an update to do default calls for preUpdating. Afterwards it\n     * calls the overrideable function, onPreUpdate.\n     */\n    preUpdate() {\n        this.onPreUpdate();\n    }\n\n    /**\n     * Called by the GameObject after an update to do default calls for postUpdating. Afterwards it\n     * calls the overrideable function, onPostUpdate.\n     */\n    postUpdate() {\n        this.onPostUpdate();\n    }\n\n    /**\n     * Override for Pre Update functionality.\n     */\n    onPreUpdate() {}\n\n    /**\n     * Override for Post Update functionality.\n     */\n    onPostUpdate() {}\n}","import Manager from './Manager';\nimport GameObject from '../object/GameObject';\n\n/**\n * A manager which manages all scenes and passes commands to the current scene.\n * \n * Manages scenes on a stack, pausing scenes below them (stopping rendering), and managing\n * the top scene for triggering updates on all objects on the scene.\n * \n * GameObjects, components, or anything else can use the SceneManager to reference the\n * current active scene. There are also wrapper functions for passing SceneObjects and\n * Viewports to the current scene for registration with that scene.\n */\nexport class _SceneManager extends Manager {\n    constructor() {\n        super();\n        this.scenes = [];\n    }\n\n    /**\n     * Adds a SceneObject to the current scene on the stack. The scene will hold \n     * reference and manage the SceneObject.\n     * \n     * @param {SceneObject} sceneObject The SceneObject that is being registered.\n     */\n    registerSceneObject(sceneObject) {\n        let scene = this.getCurrentScene();\n        if (scene != null)\n            return scene.registerSceneObject(sceneObject);\n    }\n\n    /**\n     * Addsa viewport to the current scene on the stack. The scene will hold reference\n     * to the viewport.\n     * \n     * @param {viewport} viewport The Viewport that is being registered.\n     */\n    registerViewport(viewport) {\n        let scene = this.getCurrentScene();\n        if (scene != null)\n            scene.registerViewport(viewport);\n    }\n\n    /**\n     * Gets the current scene on the stack. This scene will be the one currently\n     * used in the update loop.\n     */\n    getCurrentScene() {\n        if (this.scenes.length > 0)\n            return this.scenes[this.scenes.length - 1];\n        return null;\n    }\n\n    /**\n     * Starts the current scene on the stack.\n     */\n    start() {\n        if (this.scenes.length > 0) {\n            this.scenes[this.scenes.length - 1].start();\n        }\n    }\n\n    /**\n     * Updates the current scene and all SceneObjects that are assigned to that\n     * scene.\n     */\n    update() {\n        let scene = this.getCurrentScene();\n        if (scene != null) {\n            scene.update();\n            for (let i = 0; i < scene.sceneObjects.length; i++) {\n                scene.sceneObjects[i].update();\n            }\n        }\n    }\n\n    /**\n     * Ends all scenes, starting from the top & poping each scene off the stack as it goes.\n     */\n    end() {\n        while (this.scenes.length > 0) {\n            this.scenes[this.scenes.length - 1].pop().end();\n        }\n    }\n\n    /**\n     * Pauses the current scene.\n     */\n    pause() {\n        if (this.scenes.length > 0)\n            this.scenes[this.scenes.length - 1].pause();\n    }\n    \n    /**\n     * Unpauses the current scene.\n     */\n    unpause() {\n        if (this.scenes.length > 0)\n            this.scenes[this.scenes.length - 1].unpause();\n    }\n\n    /**\n     * Adds the new scene to the top of the stack, pausing the current\n     * scene first.\n     * \n     * @param {Scene} scene The new scene.\n     */\n    addScene(scene) {\n        this.pause();\n        this.scenes.push(scene);\n    }\n\n    /**\n     * Removes the top scene from the stack, calls its end() function,\n     * and unpauses the scene below it.\n     */\n    removeScene() {\n        this.scenes.pop().end();\n        this.unpause();\n    }\n}\n\n/**\n * Singleton reference to the Scene Manager.\n */\nconst SceneManager = new _SceneManager();\nexport default SceneManager;","/**\n * Default vertex shader that handles 2D matricies (3x3 matricies) to screen space.\n */\nexport const DEFAULT_V = `#version 300 es\n\nin vec2 a_position;\n\nuniform mat3 u_matrix;\n\nvoid main() {\n  gl_Position = vec4((u_matrix * vec3(a_position, 1)).xy, 0, 1);\n}\n`","/**\n * Default fragment shader which handles single colors.\n */\n\nexport const DEFAULT_F = `#version 300 es\n\nprecision mediump float;\n\nuniform vec4 u_color;\n\nout vec4 outColor;\n\nvoid main() {\n  outColor = u_color;\n}\n`;","import Manager from './Manager';\nimport DOMManager from './DOMManager';\nimport * as VertexShader from '../const/VertexShader';\nimport * as FragmentShader from '../const/FragmentShader';\n\n/**\n * Manages WebGL Programs so that they only need to be created once across the engine\n * allowing multiple objects to still share the same reference.\n * \n * Elliminates the need for the programmer to compile shaders and create programs, and eases \n * on-the-fly Shader compiling.\n */\nexport class _ProgramManager extends Manager {\n    constructor() {\n        super();\n        this.programIDCounter = 0;\n        this.programs = {};\n    }\n\n    /**\n     * Creates default programs for easy reference later on.\n     */\n    start() {\n        this.addProgram('Default', VertexShader.DEFAULT_V, FragmentShader.DEFAULT_F);\n    }\n\n    /**\n     * Returns a Program JSON Object containing the program, name and id.\n     * \n     * @param {string} programKey Name of the program.\n     * \n     * @returns {Program Object} Returns a JSON object with Program data.\n     */\n    getProgram(programKey) {\n        if (this.programs[programKey] == null)\n            throw 'Program does not exist!';\n        return this.programs[programKey];\n    }\n\n    /**\n     * Creates a Program JSON Object and initializes the program and metadata.\n     * The program is added to the programs array.\n     * \n     * @param {string} programName Name of the program.\n     * @param {string} vertexShaderSource Source code of the vertex shader.\n     * @param {string} fragmentShaderSource Source code of the fragment shader.\n     */\n    addProgram(programName, vertexShaderSource, fragmentShaderSource) {\n        this.programs[programName] = {\n            name: programName,\n            id: this.programIDCounter++,\n            program: this._createProgram(vertexShaderSource, fragmentShaderSource),\n        };\n    }\n\n    /**\n     * Creates a WebGL program from a compiled vertex and fragment shader. The program is returned.\n     * \n     * @param {CompiledVertexShader} vertexShader A compiled vertex shader.\n     * @param {CompiledFragmentShader} fragmentShader A compiled fragment shader.\n     * \n     * @returns {Program} A WebGL program. Null if unsuccessful.\n     */\n    _createShadersProgram(vertexShader, fragmentShader) {\n        let program = DOMManager.GL.createProgram();\n        DOMManager.GL.attachShader(program, vertexShader);\n        DOMManager.GL.attachShader(program, fragmentShader);\n        DOMManager.GL.linkProgram(program);\n        let success = DOMManager.GL.getProgramParameter(program, DOMManager.GL.LINK_STATUS);\n        if (success) {\n            return program;\n        }\n\n        console.error(DOMManager.GL.getProgramInfoLog(program));\n        DOMManager.GL.deleteProgram(program);\n        return null;\n    }\n\n    /**\n     * Creates a shader of either Vertex or Fragment type and returns the compiled version.\n     * \n     * @param {GLShaderType} type A GL shader type of either VERTEX_SHADER or FRAGMENT_SHADER.\n     * @param {string} source Source code for the shader type.\n     * \n     * @returns {CompiledShader} A compiled shader. Null if unsuccessful.\n     */\n    _createShader(type, source) {\n        let shader = DOMManager.GL.createShader(type);\n        DOMManager.GL.shaderSource(shader, source);\n        DOMManager.GL.compileShader(shader);\n        let success = DOMManager.GL.getShaderParameter(shader, DOMManager.GL.COMPILE_STATUS);\n        if (success) {\n            return shader;\n        }\n\n        console.error(DOMManager.GL.getShaderInfoLog(shader));\n        DOMManager.GL.deleteShader(shader);\n        return null;\n    }\n\n    /**\n     * Compiles the vertex shader and fragment shader and returns a WebGL program.\n     * \n     * @param {string} vertexShaderSource Source code for a vertex shader.\n     * @param {string} fragmentShaderSource Source code for a fragment shader.\n     * \n     * @returns {Program} A program compiled from the two shader sources.\n     */\n    _createProgram(vertexShaderSource, fragmentShaderSource) {\n        let vertexShader = this._createShader(DOMManager.GL.VERTEX_SHADER, vertexShaderSource);\n        let fragmentShader = this._createShader(DOMManager.GL.FRAGMENT_SHADER, fragmentShaderSource);\n\n        return this._createShadersProgram(vertexShader, fragmentShader);\n    }\n}\n\n/**\n * Singleton reference to the WebGL Program Manager.\n */\nconst ProgramManager = new _ProgramManager();\nexport default ProgramManager;","/**\n * Converts degrees to radians.\n * \n * @param {number} deg A number in degrees.\n */\nexport const degToRad = (deg) => {\n    return (deg / 180) * Math.PI;\n}\n\n/**\n * Converts radians to degress.\n * \n * @param {number} rad A number in radians.\n */\nexport const radToDeg = (rad) => {\n    return (deg / Math.PI) * 180;\n}","\n/**\n * Baseclass for a Matrix. Use Matrix3 or Matrix4 for 2D and 3D matrix math.\n */\nexport default class Matrix {\n\n    setPosition(x, y) {}\n\n    setScale(scaleX, scaleY) {}\n\n    setRotation(rotationDegree) {}\n\n    copy() {}\n\n    add(m) {}\n\n    multiply(m) {}\n}","import * as MathUtil from '../../utils/MathUtil';\nimport Matrix from './Matrix';\n\n\nexport default class Matrix3 extends Matrix {\n    constructor(data = [1,0,0,0,1,0,0,0,1]) {\n        super();\n        //default x = 0, y = 0, scaleXY = 1, rotation = 0\n        this.m = data;\n        return this;\n    }\n\n    /**\n     * Sets the translation positions of the matrix with x, y points. This overwrites the values and \n     * does not adjust the parameters to work relative to the rest of the matrix values.\n     * \n     * @param {number} x X position.\n     * @param {number} y Y position.\n     */\n    setPosition(x, y) {\n        this.m[6] = x;\n        this.m[7] = y;\n    }\n\n    /**\n     * Sets the scale values of the matrix with w, h values. This overwrites the values and \n     * does not adjust the parameters to work relative to the rest of the matrix values.\n     * \n     * @param {number} x X scale.\n     * @param {number} y Y scale.\n     */\n    setScale(x, y) {\n        this.m[0] = x;\n        this.m[4] = y;\n    }\n\n    /**\n     * Sets the matrix rotation values to rotate an object around the z axis. This overwrites the values and \n     * does not adjust the parameters to work relative to the rest of the matrix values.\n     * \n     * @param {number} rotationDegree \n     */\n    setRotation(rotationDegree) {\n        let rad = MathUtil.degToRad(rotationDegree);\n        let c = Math.cos(rad);\n        let s = Math.sin(rad);\n        this.m[0] = c;\n        this.m[1] = -s;\n        this.m[3] = s;\n        this.m[4] = c;\n    }\n\n    /**\n     * Makes a copy of the matrix3. This is a static function and can be called\n     * from Matrix3 prototype.\n     * \n     * @param {Matrix3} matrix The matrix3 to copy.\n     */\n    static copy(matrix) {\n        return new Matrix3(matrix.m.slice(0, matrix.m.length));\n    }\n\n    /**\n     * Adds a matrix to this matrix.\n     * \n     * @param {Matrix3} m3 The matrix to add to this matrix.\n     */\n    add(m3) {\n        throw 'unimplemented';\n    }\n\n    /**\n     * Static function which returns a projection matrix converting the\n     * top left coordinates to 0, 0, and bottom right to w, h.\n     * \n     * (Converted from -1, -1 top left to 1, 1 bottom right.)\n     * \n     * @param {number} w Width of the projection.\n     * @param {number} h Height of the projection.\n     */\n    static projection(w, h) {\n        return new Matrix3([\n        2 / w, 0, 0,\n        0, -2 / h, 0,\n        -1, 1, 1]);\n    }\n\n    /**\n     * Multiplies a matrix into this matrix.\n     * \n     * @param {Matrix3} m3 The matrix to multiply to this matrix.\n     */\n    multiply(m3) {\n        let mat = new Matrix3();\n        mat.m[0] = (this.m[0] * m3.m[0]) + (this.m[3] * m3.m[1]) + (this.m[6] * m3.m[2]);\n        mat.m[1] = (this.m[1] * m3.m[0]) + (this.m[4] * m3.m[1]) + (this.m[7] * m3.m[2]);\n        mat.m[2] = (this.m[2] * m3.m[0]) + (this.m[5] * m3.m[1]) + (this.m[8] * m3.m[2]);\n\n        mat.m[3] = (this.m[0] * m3.m[3]) + (this.m[3] * m3.m[4]) + (this.m[6] * m3.m[5]);\n        mat.m[4] = (this.m[1] * m3.m[3]) + (this.m[4] * m3.m[4]) + (this.m[7] * m3.m[5]);\n        mat.m[5] = (this.m[2] * m3.m[3]) + (this.m[5] * m3.m[4]) + (this.m[8] * m3.m[5]);\n\n        mat.m[6] = (this.m[0] * m3.m[6]) + (this.m[3] * m3.m[7]) + (this.m[6] * m3.m[8]);\n        mat.m[7] = (this.m[1] * m3.m[6]) + (this.m[4] * m3.m[7]) + (this.m[7] * m3.m[8]);\n        mat.m[8] = (this.m[2] * m3.m[6]) + (this.m[5] * m3.m[7]) + (this.m[8] * m3.m[8]);\n        return mat;\n    }\n}","import Manager from './Manager';\nimport DOMManager from './DOMManager';\nimport ProgramManager from './ProgramManager';\nimport SceneManager from './SceneManager';\nimport * as VertexShader from '../const/VertexShader';\nimport * as FragmentShader from '../const/FragmentShader';\nimport Matrix3 from '../render/WebGL/Matrix3';\n\nexport class _RenderManager extends Manager {\n    constructor() {\n        super();\n        this.GL = null;\n        this.currentProgram = null;\n    }\n\n    /**\n     * Initial setup on GL rendering. \n     */\n    start() {\n        this.GL = DOMManager.GL;\n\n        this._updateProgram(ProgramManager.getProgram('Default'));\n        \n        this.positionAttributeLocation = this.GL.getAttribLocation(this.currentProgram.program, \"a_position\");\n        this.colorLocation = this.GL.getUniformLocation(this.currentProgram.program, \"u_color\");\n        this.matrixLocation = this.GL.getUniformLocation(this.currentProgram.program, \"u_matrix\");\n\n        let positionBuffer = this.GL.createBuffer();\n\n        this.GL.bindBuffer(this.GL.ARRAY_BUFFER, positionBuffer);\n\n        this.GL.bufferData(this.GL.ARRAY_BUFFER, new Float32Array([0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1]), this.GL.STATIC_DRAW);\n\n        this.vao = this.GL.createVertexArray();\n\n        this.GL.bindVertexArray(this.vao);\n\n        this.GL.enableVertexAttribArray(this.positionAttributeLocation);\n\n        let size = 2;\n        let type = this.GL.FLOAT;\n        let normalize = false;\n        let stride = 0;\n        let vertexOffset = 0;\n        this.GL.vertexAttribPointer(this.positionAttributeLocation, size, type, normalize, stride, vertexOffset);\n    }\n\n    /**\n     * Checks if the program for the next object to draw must be changed.\n     * If it does, it will change WebGL programs.\n     * \n     * @param {ProgramObject} program A program object returned from ProgramManager.getProgram()\n     */\n    _updateProgram(program) {\n        if (this.currentProgram == null || this.currentProgram.id != program.id) {\n            console.info('switching programs')\n            this.GL.useProgram(program.program);\n            this.currentProgram = program;\n        }\n    }\n\n    /**\n     * Update function for updating all renderable objects in each viewport in the current scene.\n     */\n    update() {\n        this.GL.clearColor(0, 0, 0, 0);\n    \n        this.GL.clear(this.GL.COLOR_BUFFER_BIT | this.GL.DEPTH_BUFFER_BIT);\n\n        let viewports = SceneManager.getCurrentScene().viewports;\n\n        for (let vi = 0; vi < viewports.length; vi++) {\n            let viewport = viewports[vi];\n\n            let viewPortWidth = viewport.bounds.p2.x;\n            let viewPortHeight = viewport.bounds.p2.y;\n\n            this.GL.viewport(viewport.bounds.p1.x, viewport.bounds.p1.y, viewPortWidth, viewPortHeight);\n\n            //setup camera from viewport\n\n            let renderables = viewport.renderables;\n            let renderableKeys = Object.keys(renderables);\n            for (let ri = 0; ri < renderableKeys.length; ri++) {\n                let renderable = renderables[renderableKeys[ri]];\n\n                this._updateProgram(renderable.program);\n\n                this.GL.uniform4fv(this.colorLocation, renderable.color.color);\n                this.GL.uniformMatrix3fv(this.matrixLocation, false, Matrix3.projection(viewPortWidth, viewPortHeight).multiply(renderable.getMatrix()).m);\n\n\n                this.GL.drawArrays(renderable.primitiveType, 0, renderable.primitiveCount);\n            }\n        }\n    }\n}\n\n/**\n * Singleton reference to the Rendering Manager.\n */\nconst RenderManager = new _RenderManager();\nexport default RenderManager;","/**\n * A color with r, g, b, a values between 0 and 1.\n * \n * Contains instatiation functions for creating default \n * colors without explicitly defining the values.\n */\nexport default class Color {\n    /**\n     * Builds a color into an array for easy access for WebGL.\n     * \n     * @param {number} r Red value between 0 - 1\n     * @param {number} g Green value between 0 - 1\n     * @param {number} b Blue value between 0 - 1\n     * @param {number} a Alpha value between 0 - 1\n     */\n    constructor(r = 1, g = 0.078, b = 0.576, a = 1) {\n        this.color = [r, g, b, a];\n    }\n\n    /**\n     * \n     * @param {number} r Red value between 0 - 1. Defaults to previous value.\n     * @param {number} g Green value between 0 - 1. Defaults to previous value.\n     * @param {number} b Blue value between 0 - 1. Defaults to previous value.\n     * @param {number} a Alpha value between 0 - 1. Defaults to previous value.\n     */\n    set(r = this.color[0], g = this.color[1], b = this.color[2], a = this.color[3]) {\n        this.color = [r, g, b, a];\n    }\n\n    /**\n     * Returns a new color with the color green. Value: #00FF00 with alpha 1.\n     */\n    static green() {\n        return new Color(0, 1, 0, 1);\n    }\n\n    /**\n     * Returns a new color with the color blue. Value: #0000FF with alpha 1.\n     */\n    static blue() {\n        return new Color(0, 0, 1, 1);\n    }\n\n    /**\n     * Returns a new color with the color red. Value: #FF0000 with alpha 1.\n     */\n    static red() {\n        return new Color(1, 0, 0, 1);\n    }\n\n    /**\n     * Returns a new color with the color pink. Value: #FF1493 with alpha 1.\n     */\n    static pink() {\n        return new Color([1, 0.078, 0.576, 1]);\n    }\n}","import Component from './Component';\nimport SceneManager from '../manager/SceneManager';\nimport RenderManager from '../manager/RenderManager';\nimport ProgramManager from '../manager/ProgramManager';\nimport Matrix3 from '../render/WebGL/Matrix3';\nimport Color from '../internal/Color';\n\n/**\n * Base Renderable Component for all Components that want to draw to the screen. If\n * you want to show something on screen, it should derive Renderable.\n * \n * Contained in the class are functions for attaching the Renderable to viewports,\n * and updating Transform data into matricies for use with the Render Manager.\n * \n * The Renderable Component contains data on how the Renderable expects to be rendered.\n * Programs, render vectors, shader data, and other data that is on a per-object basis\n * for rendering is defined here.\n * \n * Classes which derive a Renderable should handle all base data and add or modify data\n * as needed to achieve certain effects.\n */\nexport default class Renderable extends Component {\n    /**\n     * Constructor for the Renderable component. Allows defaults to be assigned without\n     * having to call setter functions later.\n     * \n     * @param {Program} program A Program Object from the ProgramManager.\n     */\n    constructor(program = ProgramManager.getProgram('Default')) {\n        super(true);\n        this.deregisterViewports = {};\n\n        //currently unused\n        this.program = program;\n        this._matrixPosition = new Matrix3();\n        this._matrixScale = new Matrix3();\n        this._matrixRotation = new Matrix3();\n        this._matrixOriginOffset = new Matrix3();\n        this.color = new Color();\n        this.renderPositions = [0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1];\n        this.primitiveType = RenderManager.GL.TRIANGLES;\n        this.primitiveCount = 6;\n    }\n\n    /**\n     * Returns a joined matrix of position, scale, rotation and origin adjustment.\n     */\n    getMatrix() {       \n        return Matrix3.copy(this._matrixPosition).multiply(this._matrixRotation).multiply(this._matrixScale).multiply(this._matrixOriginOffset);\n    }\n\n    /**\n     * Sets the position matrix to the new position point assigned.\n     * \n     * @param {Point} point A position point.\n     */\n    setPosition(point) {\n        this._matrixPosition.setPosition(point.x, point.y); //point.z if we had 3D to override this\n    }\n\n    /**\n     * Sets the origin offset matrix to the new position point assigned. This matrix reacts differently from other matrix\n     * assignment. 0,0 is regular top left corner origin, -0.5, -0.5 centers the origin to the center of the Transform, and\n     * -1, -1 will align the origin to the bottom right.\n     * \n     * @param {Point} point Origin offset point.\n     */\n    setOriginOffset(point) {\n        this._matrixOriginOffset.setPosition(point.x, point.y); //point.z if we had 3D to override this\n    }\n\n    /**\n     * Sets the rotation matrix to the new rotation value assigned.\n     * \n     * TODO: Change to a rotation point for x, y, z rotation instead of just z.\n     * \n     * @param {number} rotation A rotation in degrees.\n     */\n    setRotation(rotation) {\n        this._matrixRotation.setRotation(rotation);\n    }\n\n    /**\n     * Sets the scale matrix to the new scale point assigned.\n     * \n     * @param {Point} scale A scale point.\n     */\n    setScale(scale) {\n        this._matrixScale.setScale(scale.x, scale.y);\n    }\n\n    /**\n     * Called immediatly after the Render component is added to a game object.\n     * \n     * Updates the data of this renderable to the current Transform data.\n     */\n    onAddComponent() {\n        let transform = this.gameObject.getComponent(\"Transform\");\n        transform.renderable = this;\n        this.setPosition(transform._position);\n        this.setScale(transform._scale);\n        this.setRotation(transform._rotation);\n    }\n\n    /**\n     * Adds this component to another viewport to be drawn. \n     * \n     * @param {number} viewportID Object ID of the viewport.\n     */\n    addToViewport(viewportID) {\n        this.deregisterViewports[viewportID] = SceneManager.getCurrentScene().registerRenderableComponent(this, viewportID);\n        return this;\n    }\n\n    /**\n     * Removes the renderable from all viewports.\n     */\n    removeFromViewports() {\n        let objKeys = Object.keys(this.deregisterViewports);\n        for (let i = 0; i < objKeys.length; i++) {\n            this.deregisterViewports[objKeys[i]]();\n        }\n    }\n}","import Renderable from './Renderable';\nimport Matrix3 from '../render/WebGL/Matrix3';\n\n/**\n * Renderable2D is a renderable component which focusses on\n * 2D shaders and matricies for 2D space rendering.\n */\nexport default class Renderable2D extends Renderable {\n    constructor() {\n        super();\n        this.className = 'Renderable2D';\n    }\n}","import Controller from './Controller';\nimport KeyCode from '../const/KeyCode';\nimport { InputManager, Point } from '../entry';\n\n/**\n * A Controller Component with extra methods designed for controlling a \n * character in a Top-Down Perspective view.\n */\nexport default class TopDownController extends Controller {\n    constructor() {\n        super();\n    }\n\n    /**\n     * Returns true if this game update notices a key press for 'W' or Up key.\n     */\n    isUpPressed() {\n        return InputManager.isKeyPressed(KeyCode.W) || InputManager.isKeyPressed(KeyCode.UP);\n    }\n\n    /**\n     * Returns true if this game update notices a key press for 'S' or Down key.\n     */\n    isDownPressed() {\n        return InputManager.isKeyPressed(KeyCode.S) || InputManager.isKeyPressed(KeyCode.DOWN);\n    }\n\n    /**\n     * Returns true if this game update notices a key press for 'A' or Left key.\n     */\n    isLeftPressed() {\n        return InputManager.isKeyPressed(KeyCode.A) || InputManager.isKeyPressed(KeyCode.LEFT);\n    }\n\n    /**\n     * Returns true if this game update notices a key press for 'D' or Right key.\n     */\n    isRightPressed() {\n        return InputManager.isKeyPressed(KeyCode.D) || InputManager.isKeyPressed(KeyCode.RIGHT);\n    }\n\n}","import Point from './Point';\n\n/**\n * Two points which represent a bounding square.\n * \n * TODO: Add z index for 3D.\n */\nexport default class Bounds {\n    /**\n     * \n     * @param {number} x The x position of the bounding box. (x1)\n     * @param {number} y The y position of the bounding box. (y1)\n     * @param {number} w The end x position, or width, of the bounding box. (x2)\n     * @param {number} h The end x position, or height, of the bounding box. (y2)\n     */\n    constructor(x, y, w, h) {\n        this.p1 = new Point(x, y);\n        this.p2 = new Point(w, h);\n    }\n\n    /**\n     * Sets the bounding box to a new position.\n     * \n     * @param {number} x The x position of the bounding box. (x1)\n     * @param {number} y The y position of the bounding box. (y1)\n     * @param {number} w The end x position, or width, of the bounding box. (x2)\n     * @param {number} h The end x position, or height, of the bounding box. (y2)\n     */\n    set(x, y, w, h) {\n        this.p1.set(x, y);\n        this.p2.set(w, h);\n    }\n\n    /**\n     * Checks to see if the point [parameter 0] is within bounds.\n     * \n     * @param {Point} point Point to check within bounds.\n     */\n    isInBounds(point) {\n        return (point.x >= this.p1.x && point.x <= this.p2.x\n                && point.y >= this.p1.y && point.y <= this.p2.y\n                && point.z >= this.p1.z && point.z <= this.p2.z);\n    }\n}","import Manager from './Manager';\n\nexport class _AudioManager extends Manager {\n    constructor() {\n        super();\n    }\n\n}\n\n/**\n * Singleton reference to the Audio Manager.\n */\nconst AudioManager = new _AudioManager();\nexport default AudioManager;","import Manager from './Manager';\n\n/**\n * Manages all Persistent Objects in the Engine. A PersistentObject is a child of \n * GameObject, and sibling of SceneObjects.\n * \n * PersistentObjects exist and update in all scenes, changing scenes will not inturrupt this object.\n */\nexport class _PersistentManager extends Manager {\n    constructor() {\n        super();\n        this.persistentObjects = {};\n    }\n\n    /**\n     * When a PersistentObject is created, it is assigned to the PersistentManager through this function.\n     * The manager will keep reference to the Object and handle Engine events.\n     * \n     * @param {persistentObject} persistentObject A PersistentObject.\n     */\n    registerPersistentObject(persistentObject) {\n        this.persistentObjects[persistentObject.id] = persistentObject;\n        let deregisterCallback = () => {\n            delete this.persistentObjects[persistentObject.id];\n        }\n        return deregisterCallback;\n    }\n\n    /**\n     * Calls update on all Persistent Objects.\n     */\n    update() {\n        let objKeys = Object.keys(this.persistentObjects);\n        for (let i = 0; i < objKeys.length; i++) {\n            this.persistentObjects[objKeys[i]].update();\n        }\n    }\n\n    /**\n     * Calls end on all Persistent Objects.\n     */\n    end() {\n        let objKeys = Object.keys(this.persistentObjects);\n        for (let i = 0; i < objKeys.length; i++) {\n            this.persistentObjects[objKeys[i]].end();\n        }\n    }\n\n    /**\n     * Calls pause on all Persistent Objects.\n     */\n    pause() {\n        let objKeys = Object.keys(this.persistentObjects);\n        for (let i = 0; i < objKeys.length; i++) {\n            this.persistentObjects[objKeys[i]].pause();\n        }\n    }\n\n    /**\n     * Calls unpause on all Persistent Objects.\n     */\n    unpause() {\n        let objKeys = Object.keys(this.persistentObjects);\n        for (let i = 0; i < objKeys.length; i++) {\n            this.persistentObjects[objKeys[i]].unpause();\n        }\n    }\n}\n\n/**\n * Singleton reference to the Persistent Objects Manager.\n */\nconst PersistentManager = new _PersistentManager();\nexport default PersistentManager;","import Manager from './Manager';\nimport RenderManager from './RenderManager';\nimport ProgramManager from './ProgramManager';\nimport SceneManager from './SceneManager';\nimport DOMManager from './DOMManager';\nimport PersistentManager from './PersistentManager';\nimport InputManager from './InputManager';\n\n/**\n *  A singleton & Manager.\n * \n * This class manages the core ECS system & game loop. It calls all other Managers\n * required to start. \n * \n * TODO: This system will be rewritten to allow Manager plugins to be added by the \n * user without editing the Engine.\n */\nexport class _EngineManager extends Manager {\n    constructor() {\n        super();\n        this.MS_PER_FRAME = 16;\n        this.coreUpdateLoopHandle = null;\n        this.hasPaused = false;\n    }\n\n    /**\n     * Called when the Engine should start all systems.\n     * This also includes specific setup code to get the game running, \n     * including setting up the render loop.\n     */\n    start() {\n        //Needs to be first to target the canvas.\n        DOMManager.start();\n        PersistentManager.start();\n        SceneManager.start();\n\n        //Needs to be ahead of RenderManager to init Programs for WebGL.\n        ProgramManager.start();\n        RenderManager.start();\n        InputManager.start();\n\n        this.coreUpdateLoopHandle = setInterval(() => {\n            if (!this.hasPaused) {\n                this.update();\n            }\n        }, this.MS_PER_FRAME);\n    }\n\n    /**\n     * The EngineManager sets up a loop on start() to call this function.\n     * Recalling this function will force a game update.\n     */\n    update() {\n        PersistentManager.update();\n        SceneManager.update();\n        RenderManager.update();\n        InputManager.update();\n    }\n\n    /**\n     * Ends the Engine by calling all manager end functions.\n     */\n    end() {\n        PersistentManager.end();\n        SceneManager.end();\n        RenderManager.end();\n        clearInterval(this.coreUpdateLoopHandle);\n        DOMManager.end();\n    }\n\n    /**\n     * Pauses the Engine by calling all manager pause functions.\n     */\n    pause() {\n        RenderManager.pause();\n        PersistentManager.pause();\n        SceneManager.pause();\n        this.hasPaused = true;\n    }\n\n    /**\n     * Unpauses the Engine by calling all manager unpause functions.\n     */\n    unpause() {\n        SceneManager.unpause();\n        PersistentManager.unpause();\n        RenderManager.unpause();\n        this.hasPaused = false;\n    }\n}\n\n/**\n * Singleton reference to the Engine Manager.\n */\nconst EngineManager = new _EngineManager();\nexport default EngineManager;","import Manager from './Manager';\n\nexport class _NetworkManager extends Manager {\n    constructor() {\n        super();\n    }\n\n}\n\n/**\n * Singleton reference to the Network Manager.\n */\nconst NetworkManager = new _NetworkManager();\nexport default NetworkManager;","import Manager from './Manager';\n\nexport class _PhysicsManager extends Manager {\n    constructor() {\n        super();\n    }\n\n}\n\n/**\n * Singleton reference to the Physics Manager.\n */\nconst PhysicsManager = new _PhysicsManager();\nexport default PhysicsManager;","import GameObject from \"./GameObject\";\nimport SceneManager from '../manager/SceneManager';\n\n/**\n * A GameObject which exists only on the current active scene.\n * When this object is instantiated, it registers with the current active scene\n * through the SceneManager.\n * \n */\nexport default class SceneObject extends GameObject {\n    /**\n     * Default position, size and rotation of the Object.\n     * \n     * @param {Point} position A point of creation in the world.\n     * @param {Point} size A point representing scale of the object.\n     * @param {number} rotation A number representing angular rotation (in degrees).\n     */\n    constructor(position = new Point(0, 0, 0), size = new Point(32, 32, 1), rotation = 0) {\n        super(position, size, rotation);\n        this.deregister = SceneManager.registerSceneObject(this);\n    }\n}","import SceneManager from '../manager/SceneManager';\nimport DOMManager from '../manager/DOMManager';\nimport Updateable from '../base/Updateable';\nimport Bounds from '../internal/Bounds';\n\n/**\n * A viewport is a display port on the game canvas. Each scene can have multiple\n * viewports and renderable objects are assigned to the ones they want to be drawn on.\n * \n * Viewports contain lighting and cameras.\n * \n * GameObjects and their components exist across all viewports, it is up to the programmer\n * to specify the viewports to render to.\n * \n * Examples on when to use viewports: \n * - UI\n * - Minimaps\n * - Different views\n * \n * TODO: An object of keys represented by 'z' indexes to store all \n * renderable objects in render order.\n */\nexport default class Viewport extends Updateable {\n    constructor(x, y, w, h) {\n        super();\n        this.bounds = new Bounds(x, y, w, h);\n\n        this.renderables = {};\n    }\n\n    /**\n     * Register an Updateable component with this viewport for drawing.\n     * \n     * @param {Renderable} renderable Renderable component to register.\n     */\n    registerRenderableComponent(renderable) {\n        this.renderables[renderable.id] = renderable;\n        let deregisterCallback = () => {\n            delete this.renderables[renderable.id];\n        }\n        return deregisterCallback;\n    }\n}","import Updateable from '../base/Updateable';\nimport { SceneObject } from '../entry';\n\n/**\n * Baseclass for all scenes. When creating a new scene, it should inherit this\n * class. \n * Scenes keep track of their scene objects and viewports. The scene baseclass has\n * functions for registering these with the scene.\n */\nexport default class Scene extends Updateable {\n\n    /**\n     * Builds the SceneObjects and Viewports list.\n     */\n    constructor() {\n        super();\n        this.sceneObjects = [];\n        this.viewports = [];\n    }\n\n    /**\n     * When a SceneObject is created, it is routed through the SceneManager to the current\n     * active scene to this function. The SceneObject will register with the scene to be referenced\n     * on update/pause/destruct calls on a scene specific basis.\n     * \n     * @param {SceneObject} sceneObject A SceneObject to register.\n     */\n    registerSceneObject(sceneObject) {\n        this.sceneObjects.push(sceneObject);\n        let deregisterCallback = () => {\n            for (let i = 0; i < this.sceneObjects.length; i++) {\n                if (this.sceneObjects[i].id ==sceneObject.id)\n                    this.sceneObjects.splice(i, 1);\n                    return;\n            }\n        }\n        return deregisterCallback;\n    }\n\n    /**\n     * Registers a Renderable component with the viewport, by index.\n     * \n     * @param {Renderable} renderable A Renderable to register to the viewport.\n     * @param {number} viewportIndex The index of the viewport.\n     */\n    registerRenderableComponent(renderable, viewportIndex) {\n        if (this.viewports.length > viewportIndex)\n            return this.viewports[viewportIndex].registerRenderableComponent(renderable);\n        else {\n            throw \"This viewport doesn't exist on this scene!\";\n        }\n    }\n\n    /**\n     * When a Viewport is created, it is routed through the SceneManager to the current\n     * active scene to this function. The Viewport will register with the scene to be referenced\n     * by the RenderManager and assigned to by Renderables.\n     * \n     * @param {Viewport} viewport A Viewport to register.\n     */\n    registerViewport(viewport) {\n        this.viewports.push(viewport);\n        this.viewportIndex = this.viewports.length - 1;\n        let deregisterCallback = () => {\n            for (let i = 0; i < this.viewports.length; i++) {\n                if (this.viewports[i].id === viewport.id) {\n                    this.viewports[i].splice(i, 1);\n                    return;\n                }\n            }\n        }\n        return deregisterCallback;\n    }\n}","'use-strict';\n\nimport EngineManager from './manager/EngineManager';\nimport Manager from './manager/Manager';\n\n/**\n * Engine Singleton class. Entry point reference to access managers and\n * to start and stop the Engine.\n */\nexport class _Engine {\n    /**\n     * Engine Contstructor.\n     */\n    constructor() {\n    }\n\n    /**\n     * Starts the engine.\n     */\n    start() {\n        EngineManager.start();\n    }\n\n    /**\n     * Stops the engine and cleans up code.\n     */\n    end() {\n        EngineManager.end();\n    }\n\n    /**\n     * Pauses the entire engine.\n     */\n    pause() {\n        EngineManager.pause();\n    }\n\n    /**\n     * Resumes to the Engine.\n     */\n    unpause() {\n        EngineManager.unpause();\n    }\n}\n\n/**\n * Singleton reference to the Engine.\n */\nconst Engine = new _Engine();\nexport default Engine;","import {Component, Point, SceneManager, Bounds} from 'seed-engine';\n\nexport default class RandomMovement extends Component {\n    /**\n     * Creates a new direction point (vector) to begin moving as.\n     */\n    constructor() {\n        super(true);\n        this.className = 'RandomMovement';\n        this.direction = new Point(Math.random() * 2 - 1, Math.random() * 2 - 1);\n        this.sceneViewportBounds = new Bounds();\n    }\n\n    /**\n     * Gets the bounds of the viewport once. If your viewports aren't going to be changing,\n     * this saves wasted time spent getting the bounds each update.\n     */\n    onStart() {\n        this.sceneViewportBounds = SceneManager.getCurrentScene().viewports[this.gameObject.viewport].bounds;\n    }\n\n    /**\n     * Moves in the direction of this.direction until it comes\n     * in contact to one of the edges of the viewport.\n     */\n    onUpdate() {\n        let transform = this.gameObject.transform;\n        let position = transform.getPosition();\n        let size = transform.getScale();\n        if (position.x - size.x / 2 + this.direction.x <= 0)\n            this.direction.x = Math.abs(this.direction.x);\n        if (position.x + size.x / 2 + this.direction.x >= this.sceneViewportBounds.p2.x)\n            this.direction.x = -Math.abs(this.direction.x);\n        if (position.y - size.y / 2 + this.direction.y <= 0)\n            this.direction.y = Math.abs(this.direction.y);\n        if (position.y + size.y / 2 + this.direction.y >= this.sceneViewportBounds.p2.y)\n            this.direction.y = -Math.abs(this.direction.y);\n        transform.translate(this.direction.x, this.direction.y);\n    }\n}","import {Component, Point, SceneManager, TopDownController} from 'seed-engine';\n\nexport default class Movement extends TopDownController {\n    constructor() {\n        super();\n        this.className = 'TopDownController';\n    }\n\n    onStart() {\n    }\n\n    onUpdate() {\n        let updatePos = new Point();\n        if (this.isUpPressed()) {\n            updatePos.y += -1;\n        }\n        if (this.isLeftPressed()) {\n            updatePos.x += -1;\n        }\n        if (this.isDownPressed()) {\n            updatePos.y += 1;\n        }\n        if (this.isRightPressed()) {\n            updatePos.x += 1;\n        }\n        updatePos.normalize();\n        updatePos.multiply(5);\n        this.gameObject.transform.translate(updatePos.x, updatePos.y, updatePos.z);\n    }\n}","import {SceneObject, Renderable2D, Point, DOMManager, ClickController, SceneManager} from 'seed-engine';\nimport RandomMovement from '../component/RandomMovement';\nimport Movement from '../component/Movement';\n\n/**\n * An example class of how a SceneObject should be written. This player doesn't actually have any way\n * of being a \"player\" yet, as there is no input reading.\n */\nexport default class Player extends SceneObject {\n    /**\n     * Defines a random position to start, and adds a Renderable Component of random color, and another component, RandomMovement.\n     */\n    constructor() {\n        super(new Point(0, 0, 0), new Point(50, 50, 50), 0);\n   \n        this.viewport = 0;\n    }\n\n    /**\n     * Called on the first update this Object has existed.\n     */\n    onStart() {        \n        this.viewport = Math.floor(Math.random() * SceneManager.getCurrentScene().viewports.length);\n        \n        let renderable = new Renderable2D();\n        this.addComponent(renderable);\n        renderable.addToViewport(this.viewport);\n        renderable.color.set(Math.random(), Math.random(), Math.random());\n\n        this.addComponent(new RandomMovement());\n        this.addComponent(new Movement());\n\n        this.addComponent(new ClickController((event) => {\n            renderable.color.set(Math.random(), Math.random(), Math.random());\n        }));\n\n        this.transform.centerOrigin();\n\n        let vpBounds = SceneManager.getCurrentScene().viewports[this.viewport].bounds;\n        this.transform.setPosition(vpBounds.p2.x / 2, vpBounds.p2.y / 2);\n    }\n\n    /**\n     * Called every update once the start() has been called.\n     */\n    onUpdate() {\n    }\n}","import {Scene, Viewport, DOMManager} from 'seed-engine';\nimport Player from '../object/Player';\nimport RandomMovement from '../component/RandomMovement';\n\n/**\n * The main scene of the game, containing one fullscreen view.\n */\nexport default class MainScene extends Scene {\n    constructor() {\n        super();\n        this.registerViewport(new Viewport(0, 0, DOMManager.canvasWidth / 2, DOMManager.canvasHeight));\n        this.registerViewport(new Viewport(DOMManager.canvasWidth / 2, 0, DOMManager.canvasWidth / 2, DOMManager.canvasHeight / 2));\n        this.registerViewport(new Viewport(DOMManager.canvasWidth / 2, DOMManager.canvasHeight / 2, DOMManager.canvasWidth / 2, DOMManager.canvasHeight / 2));\n    }\n\n    /**\n     * When this scene is started, it creates 20 players.\n     */\n    onStart() {\n        for (let i = 0; i < 2000; i++) {\n            new Player();\n        }\n    }\n\n    /**\n     * If the scene wanted to do updates that wasn't game-scope, and isn't object-scope, it should be done here.\n     */\n    onUpdate() {\n    }\n\n    /**\n     * Called when the game is ending.\n     */\n    onEnd() {\n\n    }\n}","import {Engine, BasicScene, SceneManager} from 'seed-engine';\nimport MainScene from './scene/MainScene';\n\n/**\n * Example entry class for a game. Defines a class then starts creates one underneath.\n * \n * Ensure to call Engine.start() before doing anything.\n */\nexport class Game {\n    constructor() {\n    }\n\n    /**\n     * Starts the engine loop, then adds a new scene to it.\n     */\n    start() {\n        Engine.start();\n        SceneManager.addScene(new MainScene());\n    }\n}\n\nnew Game().start();"],"sourceRoot":""}